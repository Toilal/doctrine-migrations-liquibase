<?php

declare(strict_types=1);

namespace Toilal\Doctrine\Migrations\Liquibase;

use PHPUnit\Framework\TestCase;
use Prophecy\Prophecy\ObjectProphecy;
use Prophecy\Argument;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\DBAL\Connection;
use Doctrine\DBAL\Platforms\AbstractPlatform;
use Doctrine\ORM\Configuration as EMConfig;
use Doctrine\DBAL\Schema\AbstractSchemaManager;
use Doctrine\DBAL\Schema\SchemaDiff;
use Doctrine\DBAL\Schema\ForeignKeyConstraint;
use Doctrine\DBAL\Schema\Table;
use Doctrine\DBAL\Schema\Sequence;
use Doctrine\DBAL\Schema\TableDiff;
use Doctrine\ORM\Mapping\ClassMetadata;
use Doctrine\DBAL\Schema\Schema;
use Doctrine\DBAL\Schema\SchemaConfig;
use Doctrine\ORM\Mapping\QuoteStrategy;
use Doctrine\Common\EventManager;
use Doctrine\Persistence\Mapping\ClassMetadataFactory;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2021-09-14 at 09:59:16.
 *
 * @coversDefaultClass Toilal\Doctrine\Migrations\Liquibase\LiquibaseSchemaTool
 */
final class LiquibaseSchemaToolTest extends TestCase
{

    private LiquibaseSchemaTool $object;
    private ObjectProphecy $em;
    private ObjectProphecy $connection;
    private ObjectProphecy $platform;
    private ObjectProphecy $emConfig;
    private ObjectProphecy $schemaManager;
    private ObjectProphecy $quoteStrategy;
    private ObjectProphecy $eventManager;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $this->quoteStrategy = $this->prophesize(QuoteStrategy::class);
        $this->eventManager  = $this->prophesize(EventManager::class);

        $this->emConfig = $this->prophesize(EMConfig::class);
        $this->emConfig->getQuoteStrategy()->willReturn($this->quoteStrategy->reveal());

        $this->schemaManager = $this->prophesize(AbstractSchemaManager::class);

        $this->platform   = $this->prophesize(AbstractPlatform::class);
        $this->connection = $this->prophesize(Connection::class);
        $this->connection->getDatabasePlatform()
            ->willReturn($this->platform->reveal());
        $this->connection->getSchemaManager()
            ->willReturn($this->schemaManager->reveal());

        $this->em = $this->prophesize(EntityManagerInterface::class);
        $this->em->getConnection()->willReturn($this->connection->reveal());
        $this->em->getConfiguration()->willReturn($this->emConfig->reveal());
        $this->em->getEventManager()->willReturn($this->eventManager->reveal());

        $this->object = new LiquibaseSchemaTool($this->em->reveal());
    }

    /**
     * @test
     * @covers ::diffChangeLog
     * @covers ::sanitizeOutputParameter
     * @covers ::sanitizeMetadatas
     * @covers ::removeLiquibaseTables
     */
    public function diffChangeLog(): void
    {
        $output = $this->prophesize(LiquibaseOutput::class);
        $output->getResult()
            ->willReturn('someresult');

        $output->started(Argument::type(EntityManagerInterface::class));
        $output->terminated();
        $output->createTable(Argument::type(Table::class))
            ->shouldBeCalledTimes(2);
        $output->alterTable(Argument::type(TableDiff::class));

        $table1 = new Table('tablename1');
        $table2 = new Table('tablename2');
        $table3 = new Table('liquibase');
        $table4 = new Table('liquibase_lock');

        $schemaConfig = new SchemaConfig();
        $schema       = new Schema([$table1, $table2, $table3, $table4]);

        $classMeta1        = new ClassMetadata('entity1');
        $classMeta1->table = 'tablename1';
        $classMeta2        = new ClassMetadata('entity2');
        $classMeta2->table = 'tablename2';
        $classMeta3        = new ClassMetadata('entity3');
        $classMeta3->table = 'liquibase';
        $classMeta4        = new ClassMetadata('entity4');
        $classMeta4->table = 'liquibase_lock';

        $this->schemaManager->createSchema()->willReturn($schema);
        $this->schemaManager->createSchemaConfig()->willReturn($schemaConfig);

        $this->quoteStrategy->getTableName($classMeta1, Argument::type(AbstractPlatform::class))
            ->willReturn('tablename1');
        $this->quoteStrategy->getTableName($classMeta2, Argument::type(AbstractPlatform::class))
            ->willReturn('tablename2');
        $this->quoteStrategy->getTableName($classMeta3, Argument::type(AbstractPlatform::class))
            ->willReturn('liquibase');
        $this->quoteStrategy->getTableName($classMeta4, Argument::type(AbstractPlatform::class))
            ->willReturn('liquibase_lock');

        $result = $this->object->diffChangeLog($output->reveal(), [
            $classMeta1,
            $classMeta2,
            $classMeta3,
            $classMeta4,
        ]);
        $this->assertSame('someresult', $result);
    }

    /**
     * @test
     * @covers ::diffChangeLog
     * @covers ::sanitizeOutputParameter
     * @covers ::sanitizeMetadatas
     * @covers ::removeLiquibaseTables
     */
    public function diffChangeLogMetadataFromFactory(): void
    {
        $output = $this->prophesize(LiquibaseOutput::class);
        $output->getResult()
            ->willReturn('someresult');

        $output->started(Argument::type(EntityManagerInterface::class));
        $output->terminated();
        $output->createTable(Argument::type(Table::class));
        $output->alterTable(Argument::type(TableDiff::class));

        $table1 = new Table('tablename1');
        $table2 = new Table('tablename2');

        $schemaConfig = new SchemaConfig();
        $schema       = new Schema([$table1, $table2]);

        $classMeta1        = new ClassMetadata('entity1');
        $classMeta1->table = 'tablename1';
        $classMeta2        = new ClassMetadata('entity2');
        $classMeta2->table = 'tablename2';

        $classMetadataFactory = $this->prophesize(ClassMetadataFactory::class);
        $classMetadataFactory->getAllMetadata()
            ->shouldBeCalled()
            ->willReturn([$classMeta1, $classMeta2]);

        $this->em->getMetadataFactory()->willReturn($classMetadataFactory->reveal());

        $this->schemaManager->createSchema()->willReturn($schema);
        $this->schemaManager->createSchemaConfig()->willReturn($schemaConfig);

        $this->quoteStrategy->getTableName($classMeta1, Argument::type(AbstractPlatform::class))
            ->willReturn('tablename1');
        $this->quoteStrategy->getTableName($classMeta2, Argument::type(AbstractPlatform::class))
            ->willReturn('tablename2');

        $result = $this->object->diffChangeLog($output->reveal(), null);
        $this->assertSame('someresult', $result);
    }

    /**
     * @test
     * @covers ::changeLog
     */
    public function changeLog(): void
    {
        $output = $this->prophesize(LiquibaseOutput::class);
        $output->getResult()
            ->willReturn('someresult');

        $output->started(Argument::type(EntityManagerInterface::class));
        $output->terminated();
        $output->createSchema('public')->shouldBeCalled();

        $table1 = new Table('tablename1');
        $table2 = new Table('tablename2');

        $output->createTable(Argument::type(Table::Class))->shouldBeCalledTimes(2);

        $schemaConfig = new SchemaConfig();
        $schema       = new Schema([$table1, $table2]);

        $classMeta1        = new ClassMetadata('entity1');
        $classMeta1->table = 'tablename1';
        $classMeta2        = new ClassMetadata('entity2');
        $classMeta2->table = 'tablename2';

        $this->schemaManager->createSchema()->willReturn($schema);
        $this->schemaManager->createSchemaConfig()->willReturn($schemaConfig);

        $this->quoteStrategy->getTableName($classMeta1, Argument::type(AbstractPlatform::class))
            ->willReturn('tablename1');
        $this->quoteStrategy->getTableName($classMeta2, Argument::type(AbstractPlatform::class))
            ->willReturn('tablename2');

        $result = $this->object->changeLog($output->reveal(), [
            $classMeta1,
            $classMeta2,
        ]);
        $this->assertSame('someresult', $result);
    }

    /**
     * @test
     * @covers ::__construct
     * @covers ::diffChangeLogFromSchemaDiff
     * @covers ::sanitizeOutputParameter
     */
    public function diffChangeLogFromSchemaDiff(): void
    {
        $output = $this->prophesize(LiquibaseOutput::class);

        $output->getResult()
            ->willReturn('someresult');

        $output->started(Argument::type(EntityManagerInterface::class))->shouldBeCalled();
        $output->terminated()->shouldBeCalled();

        $schemaDiff                = new SchemaDiff();
        $schemaDiff->newNamespaces = ['newnamespace'];

        $output->createSchema('newnamespace')->shouldBeCalled();

        $foreignKey = $this->prophesize(ForeignKeyConstraint::class);

        $localTable = $this->prophesize(Table::class);
        $foreignKey->getLocalTable()->willReturn($localTable->reveal());

        $output->dropForeignKey(
                Argument::type(ForeignKeyConstraint::class),
                Argument::type(Table::class)
            )
            ->shouldBeCalled();

        $schemaDiff->orphanedForeignKeys[] = $foreignKey->reveal();

        $sequence                       = $this->prophesize(Sequence::class);
        $schemaDiff->changedSequences[] = $sequence->reveal();
        $schemaDiff->removedSequences[] = $sequence->reveal();
        $schemaDiff->newSequences[]     = $sequence->reveal();

        $output->alterSequence(Argument::type(Sequence::class))->shouldBeCalled();
        $output->dropSequence(Argument::type(Sequence::class))->shouldBeCalled();
        $output->createSequence(Argument::type(Sequence::class))->shouldBeCalled();

        $table = $this->prophesize(Table::class);
        $table->getForeignKeys()->willReturn([$foreignKey->reveal()]);
        $output->createTable(Argument::type(Table::class))->shouldBeCalled();
        $output->createForeignKey(Argument::type(ForeignKeyConstraint::class), Argument::type(Table::class))->shouldBeCalled();

        $schemaDiff->newTables[] = $table->reveal();

        $output->dropTable(Argument::type(Table::class))->shouldBeCalled();
        $schemaDiff->removedTables[] = $table->reveal();

        $tableDiff                   = new TableDiff('test');
        $schemaDiff->changedTables[] = $tableDiff;
        $output->alterTable($tableDiff)->shouldBeCalled();

        $result = $this->object->diffChangeLogFromSchemaDiff($schemaDiff, $output->reveal());
        $this->assertSame('someresult', $result);
    }

}
